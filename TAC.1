#ACTTTTGTCTAAACCCCCCGTCCTATATATAACT

i =0

import re
from collections import defaultdict

seq = input("digite o codigo genetico:\n")
seq = seq.replace(' ','')
bases = ['A','G','C','T']

indexes = defaultdict(list)
counts = dict()

for base in bases:
    comSeq = re.compile(base)
    matches = comSeq.findall(seq)
    count = len(matches)
    counts[base] = count

    start = 0

    for match in matches:
        index = seq.find(base, start)
        indexes[base].append(index)
        start = index +1

a = indexes['A']
g = indexes['G']
c = indexes['C']
t = indexes['T']

seq_a=[]
seq_c=[]
seq_t=[]
seq_g=[]

# Sequência de 3 base A:
for i in range(len(a)-2):
    if a[i] == a[i+1] - 1 or a[i] == a[i-1] + 1:
        seq_a.append(a[1])

# Sequência de 3 base G:
for i in range(len(g)-2):
    if g[1] == g[i+1] - 1 or g[1] == g[i-1] + 1:
       seq_g.append(g[1])
       
# Sequência de 3 base C:
for i in range(len(c)-2):
    if c[1] == c[i+1] - 1 or c[1] == c[i-1] + 1:
       seq_c.append(c[1])
       
# Sequência de 3 base T:
for i in range(len(t)-2):
    if t[1] == t[i+1] -1 or t[1] == t[i-1] + 1:
       seq_t.append(t[1])
   
print('As posições e tamanhos de cadeia das Bases Nitrogenadas são:\n')
print('A', seq_a[0]+1, len(seq_a))
print('T', seq_t[0]+1, len(seq_t))
print('C', seq_c[0]+1, len(seq_c))
print('G', seq_g[0]+1, len(seq_g))

if len(g) <= 2:
      print('Não há cadeias na base G')
if len(a) <= 2:
      print('Não há cadeias na base A')
if len(t) <= 2:
      print('Não há cadeias na base T')
if len(c) <= 2:
      print('Não há cadeias na base C')
